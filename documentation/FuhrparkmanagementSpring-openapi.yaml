openapi: "3.0.3"
info:
  title: "Fuhrparkmanagement API"
  description: "Fuhrparkmanagement endpoint documentation"
  version: "1.0.0"
servers:
  - url: "http://localhost:8080"
tags:
  - name: Cars
    description: Cars with their attributes
  - name: Rides
    description: Combines rides with resevations
paths:
  /cars:
    get:
      tags:
        - Cars
      summary: "returns list of all cars"
      operationId: "listAll"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Car"
        403:
          description: invalid user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - Cars
      summary: "POST cars"
      operationId: "create"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Car"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Car"
  /cars/{id}:
    get:
      tags:
        - Cars
      summary: "GET cars/{id}"
      operationId: "find"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Car"
    put:
      tags:
        - Cars
      summary: "PUT cars/{id}"
      operationId: "update"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Car"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Car"
    delete:
      tags:
        - Cars
      summary: "DELETE cars/{id}"
      operationId: "delete"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /rides:
    get:
      tags:
        - Rides
      summary: "GET rides"
      operationId: "listAll"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Ride"
    post:
      tags:
        - Rides
      summary: "POST rides"
      operationId: "create"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ride"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Ride"
  /rides/{id}:
    get:
      tags:
        - Rides
      summary: "GET rides/{id}"
      operationId: "find"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Ride"
    put:
      tags:
        - Rides
      summary: "PUT rides/{id}"
      operationId: "update"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ride"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Ride"
    delete:
      tags:
        - Rides
      summary: "DELETE rides/{id}"
      operationId: "delete"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
components:
  schemas:
    Car:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        licensePlate:
          type: "string"
        modelName:
          type: "string"
        fuelType:
          type: "string"
          enum:
            - "PETROL"
            - "DIESEL"
            - "ELECTRIC"
        location:
          type: "string"
        seats:
          type: "integer"
          format: "int32"
        range:
          type: "integer"
          format: "int32"
        available:
          type: "boolean"
    Ride:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        car:
          $ref: "#/components/schemas/Car"
        startAddress:
          type: "string"
        destinationAddress:
          type: "string"
        startDate:
          type: "string"
          format: "date-time"
        endDate:
          type: "string"
          format: "date-time"
        purpose:
          type: "string"
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []